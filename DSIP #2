for exercises from https://discuss.codecademy.com/t/data-science-independent-project-2-explore-a-sample-database/419945
using .db file here https://www.sqlitetutorial.net/sqlite-sample-database/

--BASIC
--#1 Which tracks appeared in the most playlists? how many playlist did they appear in?

----to count by trackid

select name, count(trackid)
from (
	select * from tracks
	left join playlist_track
	on tracks.trackid = playlist_track.TrackId
	)
group by trackid
order by count(trackid) desc;

---- to count by track title (some have duplicate trackid values)

select name, count(name)
from (
	select * from tracks
	left join playlist_track
	on tracks.trackid = playlist_track.TrackId
	)
group by name
order by count(name) desc;

--#2 Which track generated the most revenue? which album? which genre?

-- Revenues by track name (some have multiple trackid values)

select tracks.trackid, tracks.name, (invoice_items.UnitPrice*count(invoice_items.Quantity)) as revenues from invoice_items
left join tracks
on invoice_items.TrackId = tracks.TrackId
group by tracks.name
order by revenues desc, tracks.trackid ASC
limit 10

-- Revenues by trackid

select tracks.trackid, tracks.name, (invoice_items.UnitPrice*count(invoice_items.Quantity)) as revenues from invoice_items
left join tracks
on invoice_items.TrackId = tracks.TrackId
group by tracks.trackid
order by revenues desc, tracks.trackid ASC
limit 10

-- Revenues by Album Title

select albums. albumid, albums.title, (invoice_items.UnitPrice * count(invoice_items.quantity)) as revenues from invoice_items
left join tracks
on invoice_items.trackid = tracks.trackid
left join albums
on tracks.AlbumId = albums.albumid 
group by albums.title
order by revenues DESC
limit 10

-- Revenues by Genre

select genres.name, sum(invoice_items.unitprice * invoice_items.quantity) as revenues from invoice_items
left join tracks on invoice_items.trackid = tracks.TrackId
left join genres on tracks.genreid = genres.GenreId
group by genres.name
order by revenues desc

-- #3 Which countries have the highest sales revenue? What percent of total revenue does each country make up?

select invoices.BillingCountry, sum(invoice_items.unitprice * invoice_items.quantity) as revenues,
(sum(invoice_items.unitprice * invoice_items.quantity)*100/(select sum(invoices.total) from invoices))  as revenuepercent from invoices
left join invoice_items
on invoices.InvoiceId = invoice_items.InvoiceId
group by BillingCountry
order by revenues desc

--#4 How many customers did each employee support, what is the average revenue for each sale, and what is their total sale?

-- pulls: employee|Number of customers supported|number of sales|revenues from total number of sales|average revenue per sale (not per customer)| [other examples are wrong from others, and calculate average revenue per customer, but not per sale]

select employees.FirstName, employees.LastName, count( distinct customers.CustomerId) as totalhelped, count (customers.CustomerId) as totalsales, sum(invoices.Total) as totalsalesrevenue, (sum(invoices.Total))/count(invoices.CustomerId) as averagesales  from customers
left join employees on customers.SupportRepId = employees.EmployeeId
left join invoices on customers.customerid = invoices.CustomerId
group by employees.EmployeeId
order by totalhelped desc, totalsales desc

--INTERMEDIATE

--#1

-- tempalbumtable creates table listing albums and trackids.
-- finaltable adds a count for # of tracks per album, and sales per album
-- final calculations average sales per albumlength based on finaltable

with finaltable as(
	With tempalbumtable as(
		select albums.AlbumId, albums.Title, tracks.trackid from albums
		inner join tracks
		on albums.AlbumId = tracks.albumid
		)
	select tempalbumtable.albumid, tempalbumtable.title, count( distinct tempalbumtable.trackid) as ntracks, sum(invoice_items.UnitPrice * invoice_items.quantity) as sales from tempalbumtable
	left join invoice_items
	on tempalbumtable.trackid = invoice_items.TrackId
	group by tempalbumtable.title
	order by ntracks desc)
select finaltable.ntracks, avg(finaltable.sales) from finaltable
group by finaltable.ntracks
order by avg(finaltable.sales) desc


